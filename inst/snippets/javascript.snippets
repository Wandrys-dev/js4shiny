snippet Shinymsg
	Shiny.addCustomMessageHandler('${1:handlerName}', ${2:function})

snippet ShinysetInput
	Shiny.setInputValue('${1:inputId}', ${2:value})

snippet ShinysetInputTyped
	Shiny.setInputValue('${1:inputId}:${2:inputType}', ${3:value})

snippet ShinysetEvent
	Shiny.setInputValue('${1:inputId}', ${2:value}, {priority: 'event'})

snippet ShinysetEventTyped
	Shiny.setInputValue('${1:inputId}:${2:inputType}', ${3:value}, {priority: 'event'})

snippet ShinyInputBinding
	// Ref: https://shiny.rstudio.com/articles/building-inputs.html
	// Ref: https://github.com/rstudio/shiny/blob/master/srcjs/input_binding.js

	const ${1:bindingName} = new Shiny.InputBinding();

	\$.extend(${1:bindingName}, {
	  find: function(scope) {
	    // Specify the selector that identifies your input. `scope` is a general
	    // parent of your input elements. This function should return the nodes of
	    // ALL of the inputs that are inside `scope`. These elements should all
	    // have IDs that are used as the inputId on the server side.
	    return scope.querySelectorAll("${2:inputBindingSelector}");
	  },
	  getValue: function(el) {
	    // For a particular input, this function is given the element containing
	    // your input. In this function, find or construct the value that will be
	    // returned to Shiny. The ID of `el` is used for the inputId.

	    // e.g: return el.value
	    return 'FIXME';
	  },
	  receiveMessage: function(el, data) {
	    // Given the input's container and data, update the input
	    // and its elements to reflect the given data.
	    // The messages are sent from R/Shiny via
	    // R> session$sendInputMessage(inputId, data)
	    throw 'receiveMessage is yet not defined for ${1:bindingName}';
	  },
	  subscribe: function(el, callback) {
	    \$(el).on("change.${1:bindingName}", function(e) {
	      // Use callback() or callback(true).
	      // If using callback(true) the rate policy applies,
	      // for example if you need to throttle or debounce
	      // the values being sent back to the server.
	      callback();
	    });
	  },
	  getRatePolicy: function() {
	    return {
	      policy: 'debounce', // or 'throttle' or 'direct' (default)
	      delay: 100 // milliseconds for debounce or throttle
	    };
	  },
	  unsubscribe: function(el) {
	    \$(el).off(".${1:bindingName}");
	  }
	});

	Shiny.inputBindings.register(${1:bindingName}, '${3:pkgName}.${1:bindingName}');

snippet did
	document.getElementById('$0')

snippet dqs
	document.querySelector('$0')

snippet dqsa
	document.querySelectorAll('$0')

snippet daddEvent
	document.addEventListener('${1:event}', function(event) {
	  $0
	})

snippet elid
	${1:el}.getElementById('$0')

snippet elqs
	${1:el}.querySelector('$0')

snippet elqsa
	${1:el}.querySelectorAll('$0')

snippet eladdEvent
	${1:el}.addEventListener('${2:event}', function(event) {
	  $0
	})

snippet iife
	(function() {
	  $0
	})()

snippet dready
	document.addEventListener("DOMContentLoaded", function() {
	  // run this code once the document is ready
	  $0
	})

snippet jqready
	// jquery for run when document is ready
	\$(function() {
	  $0
	})
