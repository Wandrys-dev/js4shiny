% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/addins.R
\name{live_preview}
\alias{live_preview}
\alias{live_preview_stop}
\title{Serve a Live Preview}
\usage{
live_preview(
  path = getwd(),
  update_pattern = "[.](js|css|[Rr]?[Mm][Dd]|html?|s[ca]ss)$",
  ...,
  render_quietly = getOption("js4shiny.live_preview.quiet", TRUE),
  external = FALSE
)

live_preview_stop(which = NULL)
}
\arguments{
\item{path}{The path for the directory or file to preview. If the path given
is an R Markdown document or HTML document, the HTML version of that file
will be opened directly, otherwise the directory containing the file will
be served.}

\item{update_pattern}{Update the live preview when files matching this
pattern are updated. By default, updating files with the following
extensions will update the preview: \code{.Rmd} (case insensitive), \code{.html},
\code{.htm}, \code{.js}, \code{.css}, \code{.sass}, \code{.scss}.}

\item{...}{
  Arguments passed on to \code{\link[servr:httd]{servr::httw}}
  \describe{
    \item{\code{dir}}{The root directory to serve.}
    \item{\code{watch}}{a directory under which \code{httw()} is to watch for changes;
if it is a relative path, it is relative to the \code{dir} argument}
    \item{\code{pattern}}{a regular expression passed to \code{\link{list.files}()} to
determine the files to watch}
    \item{\code{all_files}}{whether to watch all files including the hidden files}
    \item{\code{handler}}{a function to be called every time any files are changed or
added under the directory; its argument is a character vector of the
filenames of the files modified or added}
  }}

\item{render_quietly}{If \code{TRUE} (default), the output from
\code{\link[rmarkdown:render]{rmarkdown::render()}} will not be shown. Set to \code{FALSE} for debugging. You
can set the default value with a global option:

\code{options(js4shiny.live_preview.quiet = FALSE)}}

\item{external}{Should the live preview be opened in an external browser?
The default is \code{FALSE} and the preivew is opened in the RStudio viewer pane
(if launched inside RStudio).}

\item{which}{A integer vector of the server IDs; by default, IDs of all
existing servers in the current R session obtained from
\code{daemon_list()}, i.e., all daemon servers will be stopped by default.}
}
\value{
Invisibly returns the \code{\link[servr:httd]{servr::httw()}} object, so that you can
manually stop the server with the \verb{$stop_server()} method.
}
\description{
Opens a live preview of the files in a directory. The live preview server
automatically renders R Markdown files when they are saved, and the preview
is refreshed whenever R Markdown files or supporting files, such as \code{.js},
\code{.css}, \code{.htm}, \code{.html}, \code{.sass}, or \code{.scss} files, are updated. This
functionality requires the \pkg{servr} package.
}
\section{Functions}{
\itemize{
\item \code{live_preview_stop}: Stop the live preview background daemons. See
\code{\link[servr:daemon_stop]{servr::daemon_list()}} for more information.
}}

\section{RStudio Addins}{
 There are three Live Preview addins provided by
\pkg{js4shiny}. \strong{Live Preview} and \strong{Live Preview (External)} open a
live preview of the directory of the currently open document, if possible
at the current HTML document corresponding to the open document. The
external preview addin automatically opens the preview in your web browser,
otherwise the preview is opened in the RStudio Viewer pane.

To stop the live server, you can call \code{servr::daemon_stop()} or
\code{live_preview_stop()}, which will stop all bakground \pkg{servr} daemons,
or you can use the \strong{Live Preview Stop} addin.
}

\examples{
if (interactive()) {

tmp_dir <- tempfile("live-preview")
dir.create(tmp_dir)
tmp_rmd <- file.path(tmp_dir, "js4shiny-plain.Rmd")

# Create a new js4shiny plain HTML document. If interactive
# and in RStudio, this file will open and you can use the
# addins to launch the live preview
js4shiny_rmd("js", full_template = TRUE, path = tmp_rmd)

srvr <- live_preview(tmp_rmd)

# Stop all background servers with either of the following
# live_preview_stop()
# servr::daemon_stop()
#
# Or if you've saved the return value from live_preview()
# srvr$stop_server()
}

}
