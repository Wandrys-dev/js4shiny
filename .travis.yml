# tic documentation: https://docs.ropensci.org/tic/dev/

# OS ---------------------------------------------------------------------------
os: linux
dist: bionic

# meta -------------------------------------------------------------------------
language: r
cache:
  - packages
  - ccache
latex: false

env:
  global:
    - MAKEFLAGS="-j 2"

addons:
  ssh_known_hosts:
  - github.com
  - 140.82.114.3

# Stages -----------------------------------------------------------------------

before_install:
  - echo -e "options(Ncpus = 8, repos = structure(c(CRAN = 'https://cloud.r-project.org/')))" > $HOME/.Rprofile
  - mkdir $HOME/.R && echo -e 'CXX_STD = CXX14\n\nCC=ccache gcc -std=gnu99\nCXX=ccache g++\nCXX11=ccache g++ -std=gnu99\nCXX14=ccache g++ -std=gnu99\nC11=ccache g++\nC14=ccache g++\nFC=ccache gfortran\nF77=ccache gfortran' > $HOME/.R/Makevars
  - mkdir -p $HOME/.ccache && echo -e 'max_size = 5.0G\nsloppiness = include_file_ctime\nhash_dir=false' > $HOME/.ccache/ccache.conf
  - R -q -e 'if (!requireNamespace("remotes")) install.packages("remotes")'
  - R -q -e 'if (getRversion() < "3.2" && !requireNamespace("curl")) install.packages("curl")'
  - R -q -e 'remotes::install_github("ropenscilabs/tic"); print(tic::dsl_load()); tic::prepare_all_stages()'
  - R -q -e 'tic::before_install()'
install:
  - if [ "${TRAVIS_OS_NAME}" == "osx" ]; then brew install ccache; fi
  - if [ "${TRAVIS_OS_NAME}" == "osx" ]; then export PATH="/usr/local/opt/ccache/libexec:$PATH"; fi
  - R -q -e 'tic::install()'
before_script: R -q -e 'tic::before_script()'
script: R -q -e 'tic::script()'
after_success: R -q -e 'tic::after_success()'
after_failure: R -q -e 'tic::after_failure()'
before_deploy: R -q -e 'tic::before_deploy()'
deploy:
  provider: script
  script: R -q -e 'tic::deploy()'
  on:
    all_branches: true
after_deploy: R -q -e 'tic::after_deploy()'
after_script: R -q -e 'tic::after_script()'

# Custom user code -------------------------------------------------------------
notifications:
  slack:
    secure: 0edR69WCadxHE9nDQVPV5m9Hf9u0Z2a5CQgdSOWdd0duW6FUzafViXjwdtpNuZijEcmRX77BBwLJGIVgaFkqXuhp4fWZyEWGXiq61lVXvf4WnYbUGyOMRWzNP9685bzvbopDyUkW6a/7HIvzESoi1Z3TZdVPThmtss30HqWyoB/DAx0eyvR7ANMUHVSrhHXQn9rJgr5RlN56A3UJBVt7hlcFXBzyHZA7R7xD6tvcHUDSuL+Wj60nmHP3MqkInXXBc+hBrM3IBYCGaId7MgvJRbzvYZg2iWPx0mGyLvIdtMRnuheqM8PGji02m3dZS8HOg6D1VqmYic03ZRHDi2ePA5x7pr9fVmEtQ4+7+A6MxlLGS3elQYNIQKigKUv54HP6HLMMyoHT/uaP+SO/8r0KVjqYf7p3BsNZ+H/E5qfLJFc76QQHcccM5TOpVJEqRpVbd+T+7k9Z+NAItWOM8GHvDuJdBHa4xpAsOlUFWqVI5ny8Wr/kDaPkgNANZyfSJoS6E/c+nHF3RJPZ6BesRG5zN+mIrQ4cOaK+GsHXWFP2Jl2own61lpI/5R1okbndQC0ThBbiZdN3L6rslyCURpDTFBALuAGdxWnehgvrPgYKNz95vZPEydBvuosCJJu1ChxiOKfZ6U6p6tt1yrpB4B6g08OVsgiBtso+rQLXAzQw2SE=
